<?xml version="1.0" encoding="UTF-8" standalone="no" ?><w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main"><w:body><w:p><w:pPr><w:pStyle w:val="code"/></w:pPr><w:r><w:t><![CDATA[classdef sample_region < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        UIFigure                    matlab.ui.Figure
        TabGroup                    matlab.ui.container.TabGroup
        RegionTab                   matlab.ui.container.Tab
        PositionEditFieldLabel      matlab.ui.control.Label
        PositionEditField           matlab.ui.control.EditField
        TargetEditFieldLabel        matlab.ui.control.Label
        TargetEditField             matlab.ui.control.EditField
        FilterDropDownLabel         matlab.ui.control.Label
        FilterDropDown              matlab.ui.control.DropDown
        FilterParamsEditFieldLabel  matlab.ui.control.Label
        FilterParamsEditField       matlab.ui.control.EditField
        RadiusEditFieldLabel        matlab.ui.control.Label
        RadiusEditField             matlab.ui.control.EditField
        BeamNameEditFieldLabel      matlab.ui.control.Label
        BeamNameEditField           matlab.ui.control.EditField
        BackgroundDropDownLabel     matlab.ui.control.Label
        BackgroundDropDown          matlab.ui.control.DropDown
        SizeEditFieldLabel          matlab.ui.control.Label
        SizeEditField               matlab.ui.control.EditField
        UIAxes                      matlab.ui.control.UIAxes
        AddRegionButton             matlab.ui.control.Button
        RemoveRegionButton          matlab.ui.control.Button
    end


    properties (Access = private)
        beamData; % The beam data this object has generated
    end

    methods (Access = private)
    
        function saveData(app)
            varname = app.BeamNameEditField.Value;
            if isvarname(varname)
                eval(['global ', varname, '; ', varname, ' = app.beamData;']);
            end
        end
        
        function updateData(app)
            
            % Get beam size
            sz = eval(['[', app.SizeEditField.Value, ']']);
            if length(sz) == 1
                sz = [sz, sz];
            elseif length(sz) == 2
                % nothing to do
            else
                error('Size must be one or two elements');
            end
            
            background = app.BackgroundDropDown.Value;
            
            locations = {};
            detectors = {};
            amplitudes = {};
            radius = [];
            
            % Get parameters from user interface
            for ii = 1:length(app.TabGroup.Children)
                tab = app.TabGroup.Children(ii);
                
                locationEntry = findall(tab, 'UserData', 'location');
                radiusEntry = findall(tab, 'UserData', 'radius');
                targetEntry = findall(tab, 'UserData', 'target');
                filterEntry = findall(tab, 'UserData', 'filter');
                filterParamsEntry = findall(tab, 'UserData', 'filter_params');
                
                locations{ii} = eval(['[', locationEntry.Value, ']']);
                detectors{ii} = eval(['[', targetEntry.Value, ']']);
                radius(ii) = eval(['[', radiusEntry.Value, ']']);
                amplitudes{ii} = {filterEntry.Value};
                amplitudes{ii} = [amplitudes{ii}, eval(['{', filterParamsEntry.Value, '}'])];
            end
            
            % Call the library function
            app.beamData = otslm.tools.sample_region(sz, locations, detectors, ...
                'background', background, 'amplitude', amplitudes, ...
                'radii', radius);
            
            % Display the image
            imagesc(app.UIAxes, app.beamData);
            axis(app.UIAxes, [1, sz(2), 1, sz(1)]);
            axis(app.UIAxes, 'image');
            
            % Always try and save after updating
            app.saveData();
        end
        
    end


    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)
            
            % Hide the template tab
            app.RegionTab.Parent = [];
            app.PositionEditField.UserData = 'location';
            app.TargetEditField.UserData = 'target';
            app.RadiusEditField.UserData = 'radius';
            app.FilterDropDown.UserData = 'filter';
            app.FilterParamsEditField.UserData = 'filter_params';
            app.RemoveRegionButton.Enable = 'off';
            
            app.updateData();
        end

        % Callback function
        function BeamNameEditFieldValueChanged(app, event)
            app.saveData();
        end

        % Value changed function: SizeEditField
        function SizeEditFieldValueChanged(app, event)
            app.updateData();
        end

        % Value changed function: BackgroundDropDown
        function BackgroundDropDownValueChanged(app, event)
            app.updateData();
        end

        % Button pushed function: RemoveRegionButton
        function RemoveRegionButtonPushed(app, event)
            % TODO: Remove the current region
            selectedTab = app.TabGroup.SelectedTab;
            if ~isempty(selectedTab)
                selectedTab.Parent = [];
                if isempty(app.TabGroup.Children)
                    app.RemoveRegionButton.Enable = 'off';
                end
            end
            app.updateData();
        end

        % Button pushed function: AddRegionButton
        function AddRegionButtonPushed(app, event)
            tab = copyobj(app.RegionTab, app.TabGroup);
            
            % Add callbacks to new object
            locationEntry = findall(tab, 'UserData', 'location');
            targetEntry = findall(tab, 'UserData', 'target');
            radiusEntry = findall(tab, 'UserData', 'radius');
            filterEntry = findall(tab, 'UserData', 'filter');
            filterParamsEntry = findall(tab, 'UserData', 'filter_params');
            locationEntry.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            targetEntry.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            radiusEntry.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            filterEntry.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            filterParamsEntry.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            
            app.RemoveRegionButton.Enable = 'on';
            app.updateData();
        end

        % Callback function: FilterDropDown, FilterParamsEditField, 
        % PositionEditField, TargetEditField
        function RegionValueChanged(app, event)
            app.updateData();
        end
    end

    % App initialization and construction
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create UIFigure
            app.UIFigure = uifigure;
            app.UIFigure.Position = [100 100 727 429];
            app.UIFigure.Name = 'UI Figure';

            % Create TabGroup
            app.TabGroup = uitabgroup(app.UIFigure);
            app.TabGroup.Position = [21 99 250 221];

            % Create RegionTab
            app.RegionTab = uitab(app.TabGroup);
            app.RegionTab.Title = 'Region';

            % Create PositionEditFieldLabel
            app.PositionEditFieldLabel = uilabel(app.RegionTab);
            app.PositionEditFieldLabel.HorizontalAlignment = 'right';
            app.PositionEditFieldLabel.Position = [41 169 49 15];
            app.PositionEditFieldLabel.Text = 'Position';

            % Create PositionEditField
            app.PositionEditField = uieditfield(app.RegionTab, 'text');
            app.PositionEditField.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            app.PositionEditField.Position = [111 165 130 22];
            app.PositionEditField.Value = '100,100';

            % Create TargetEditFieldLabel
            app.TargetEditFieldLabel = uilabel(app.RegionTab);
            app.TargetEditFieldLabel.HorizontalAlignment = 'right';
            app.TargetEditFieldLabel.Position = [51 109 39 15];
            app.TargetEditFieldLabel.Text = 'Target';

            % Create TargetEditField
            app.TargetEditField = uieditfield(app.RegionTab, 'text');
            app.TargetEditField.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            app.TargetEditField.Position = [111 105 130 22];
            app.TargetEditField.Value = '10,10';

            % Create FilterDropDownLabel
            app.FilterDropDownLabel = uilabel(app.RegionTab);
            app.FilterDropDownLabel.HorizontalAlignment = 'right';
            app.FilterDropDownLabel.Position = [61 79 32 15];
            app.FilterDropDownLabel.Text = 'Filter';

            % Create FilterDropDown
            app.FilterDropDown = uidropdown(app.RegionTab);
            app.FilterDropDown.Items = {'Step', 'Gaussian Dither', 'Gaussian Noise', 'Gaussian Scale'};
            app.FilterDropDown.ItemsData = {'step', 'gaussian_dither', 'gaussian_noise', 'gaussian_scale'};
            app.FilterDropDown.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            app.FilterDropDown.Position = [111 75 130 22];
            app.FilterDropDown.Value = 'step';

            % Create FilterParamsEditFieldLabel
            app.FilterParamsEditFieldLabel = uilabel(app.RegionTab);
            app.FilterParamsEditFieldLabel.HorizontalAlignment = 'right';
            app.FilterParamsEditFieldLabel.Position = [11 49 77 15];
            app.FilterParamsEditFieldLabel.Text = 'Filter Params';

            % Create FilterParamsEditField
            app.FilterParamsEditField = uieditfield(app.RegionTab, 'text');
            app.FilterParamsEditField.ValueChangedFcn = createCallbackFcn(app, @RegionValueChanged, true);
            app.FilterParamsEditField.Position = [111 45 130 22];

            % Create RadiusEditFieldLabel
            app.RadiusEditFieldLabel = uilabel(app.RegionTab);
            app.RadiusEditFieldLabel.HorizontalAlignment = 'right';
            app.RadiusEditFieldLabel.Position = [53 139 44 15];
            app.RadiusEditFieldLabel.Text = 'Radius';

            % Create RadiusEditField
            app.RadiusEditField = uieditfield(app.RegionTab, 'text');
            app.RadiusEditField.Position = [111 135 130 22];
            app.RadiusEditField.Value = '10';

            % Create BeamNameEditFieldLabel
            app.BeamNameEditFieldLabel = uilabel(app.UIFigure);
            app.BeamNameEditFieldLabel.HorizontalAlignment = 'right';
            app.BeamNameEditFieldLabel.Position = [81 392 73 15];
            app.BeamNameEditFieldLabel.Text = 'Beam Name';

            % Create BeamNameEditField
            app.BeamNameEditField = uieditfield(app.UIFigure, 'text');
            app.BeamNameEditField.Position = [171 388 100 22];
            app.BeamNameEditField.Value = 'newBeam';

            % Create BackgroundDropDownLabel
            app.BackgroundDropDownLabel = uilabel(app.UIFigure);
            app.BackgroundDropDownLabel.HorizontalAlignment = 'right';
            app.BackgroundDropDownLabel.Position = [81 332 71 15];
            app.BackgroundDropDownLabel.Text = 'Background';

            % Create BackgroundDropDown
            app.BackgroundDropDown = uidropdown(app.UIFigure);
            app.BackgroundDropDown.Items = {'Zero', 'NaN', 'Checker Board', 'Random', 'Random Binary'};
            app.BackgroundDropDown.ItemsData = {'zero', 'nan', 'checkerboard', 'random', 'randombin'};
            app.BackgroundDropDown.ValueChangedFcn = createCallbackFcn(app, @BackgroundDropDownValueChanged, true);
            app.BackgroundDropDown.Position = [171 328 100 22];
            app.BackgroundDropDown.Value = 'zero';

            % Create SizeEditFieldLabel
            app.SizeEditFieldLabel = uilabel(app.UIFigure);
            app.SizeEditFieldLabel.HorizontalAlignment = 'right';
            app.SizeEditFieldLabel.Position = [121 362 29 15];
            app.SizeEditFieldLabel.Text = 'Size';

            % Create SizeEditField
            app.SizeEditField = uieditfield(app.UIFigure, 'text');
            app.SizeEditField.ValueChangedFcn = createCallbackFcn(app, @SizeEditFieldValueChanged, true);
            app.SizeEditField.Position = [171 358 100 22];
            app.SizeEditField.Value = '512, 512';

            % Create UIAxes
            app.UIAxes = uiaxes(app.UIFigure);
            title(app.UIAxes, 'Title')
            xlabel(app.UIAxes, 'X')
            ylabel(app.UIAxes, 'Y')
            app.UIAxes.Position = [297 17 418 394];

            % Create AddRegionButton
            app.AddRegionButton = uibutton(app.UIFigure, 'push');
            app.AddRegionButton.ButtonPushedFcn = createCallbackFcn(app, @AddRegionButtonPushed, true);
            app.AddRegionButton.Position = [31 68 100 22];
            app.AddRegionButton.Text = 'Add Region';

            % Create RemoveRegionButton
            app.RemoveRegionButton = uibutton(app.UIFigure, 'push');
            app.RemoveRegionButton.ButtonPushedFcn = createCallbackFcn(app, @RemoveRegionButtonPushed, true);
            app.RemoveRegionButton.Position = [161 68 104 22];
            app.RemoveRegionButton.Text = 'Remove Region';
        end
    end

    methods (Access = public)

        % Construct app
        function app = sample_region

            % Create and configure components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.UIFigure)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.UIFigure)
        end
    end
end]]></w:t></w:r></w:p></w:body></w:document>